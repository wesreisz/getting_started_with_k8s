<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started with Containerization and Kubernetes</title>
    <link>http://www.wesleyreisz.com/getting_started_with_k8s/</link>
    <description>Recent content on Getting Started with Containerization and Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Oct 2020 01:00:00 -0138</lastBuildDate><atom:link href="http://www.wesleyreisz.com/getting_started_with_k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course Introduction</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/0-introduction/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/0-introduction/</guid>
      <description>Kubernetes (K8s) is a very powerful tool, primarily concerned with orchestrating and automating the deployment and management of networked applications.
Understanding how Kubernetes works makes you an effective power user for building higher-level platforms. This workshop is aimed at technologists and team leads looking to lift up the hood and understand what are all the major parts of k8s in a fast-paces half-day session.
Key Takeaways  Understand the major goals and objectives of kubernetes Learn how kubernetes is architected Understand how to deploy and operate a service on kubernetes  Audience You should have a familiarity with containers and want to learn more about their orchestration on top of Kubernetes</description>
    </item>
    
    <item>
      <title>K8s Concepts</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/1-concepts/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/1-concepts/</guid>
      <description>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.
The name Kubernetes originates from Greek, meaning helmsman or pilot. Google open-sourced the Kubernetes project in 2014. Kubernetes combines over 15 years of Google&amp;rsquo;s experience running production workloads at scale with best-of-breed ideas and practices from the community.</description>
    </item>
    
    <item>
      <title>Deploying an App</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/2-app-deployment/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/2-app-deployment/</guid>
      <description>Now that we have a basic understanding of what Kubernetes is and how it operates. We&amp;rsquo;re going to deploy a simple application and interact with it. We will write this app locally, buld it, push it to Dockerhub. Then we&amp;rsquo;ll create a docker-compose file and run it. Then we&amp;rsquo;ll use Kompose and discuss how it can help you go from a docker-compose.yaml file to a deployment yaml file for Kubernetes. We&amp;rsquo;ll deploy this file with the kubectl apply -f command.</description>
    </item>
    
    <item>
      <title>Exposing the App</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/3-exposing-app/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/3-exposing-app/</guid>
      <description>A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them. Services enable a loose coupling between dependent Pods. A Service is defined using YAML (preferred) or JSON, like all Kubernetes objects. The set of Pods targeted by a Service is usually determined by a LabelSelector (see below for why you might want a Service without including selector in the spec).</description>
    </item>
    
    <item>
      <title>K8s Architecture and Components</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/4-architecture/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/4-architecture/</guid>
      <description>This architecture of Kubernetes provides a flexible, loosely-coupled mechanism for service discovery. Like most distributed computing platforms, a Kubernetes cluster consists of at least one master and multiple compute nodes. The master is responsible for exposing the application program interface (API), scheduling the deployments and managing the overall cluster. Each node runs a container runtime, such as Docker or rkt, along with an agent that communicates with the master. The node also runs additional components for logging, monitoring, service discovery and optional add-ons.</description>
    </item>
    
    <item>
      <title>Networking</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/5-networking/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/5-networking/</guid>
      <description>The Kubernetes network model Every Pod gets its own IP address. This means you do not need to explicitly create links between Pods and you almost never need to deal with mapping container ports to host ports. This creates a clean, backwards-compatible model where Pods can be treated much like VMs or physical hosts from the perspectives of port allocation, naming, service discovery, load balancing, application configuration, and migration.
Key Takeaways  Understand about more complicated configurations for architecture components Explore the CNCF Cloud Native Landscape around Kubernetes  Kubernetes imposes the following fundamental requirements on any networking implementation (barring any intentional network segmentation policies):</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/6-ingress/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/6-ingress/</guid>
      <description>Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.
An Ingress may be configured to give Services externally-reachable URLs, load balance traffic, terminate SSL / TLS, and offer name-based virtual hosting. An Ingress controller is responsible for fulfilling the Ingress, usually with a load balancer, though it may also configure your edge router or additional frontends to help handle the traffic.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/7-security/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/7-security/</guid>
      <description>Kubernetes security is important throughout the container lifecycle due to the distributed, dynamic nature of a Kubernetes cluster. Different security approaches are required for each of the three phases of an application lifecycle: build, deploy, and runtime. Kubernetes provides innate security advantages. For example, application containers are typically not patched or updated — instead, container images are replaced entirely with new versions. This enables strict version control and permits rapid rollbacks if a vulnerability is uncovered in new code.</description>
    </item>
    
    <item>
      <title>22 Essential Concepts</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/8-22-essential/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/8-22-essential/</guid>
      <description>Cloud native represents a paradigm shift in the way infrastructure is deployed. If you are new to cloud native and Kubernetes, there are 22 essential Kubernetes concepts you’ll need to wrap your head around.
Key Takeaways  Reiterate k8s core concepts  Workloads  Node - A node may be a virtual or physical machine, depending on the cluster. Each node contains the services necessary to run Pods, managed by the control plane.</description>
    </item>
    
    <item>
      <title>Wrap Up</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/9-wrapup/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/9-wrapup/</guid>
      <description>Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.
The name Kubernetes originates from Greek, meaning helmsman or pilot. Google open-sourced the Kubernetes project in 2014. Kubernetes combines over 15 years of Google&amp;rsquo;s experience running production workloads at scale with best-of-breed ideas and practices from the community.</description>
    </item>
    
    <item>
      <title>Notes</title>
      <link>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/notes-ingress-lb/</link>
      <pubDate>Fri, 23 Oct 2020 01:00:00 -0138</pubDate>
      
      <guid>http://www.wesleyreisz.com/getting_started_with_k8s/posts/lesson-1/notes-ingress-lb/</guid>
      <description>Key Takeaways  Understand the sample app Understand some of the terminology k8s users to talk about applications  spin up with docker compose
talk about kompose conf
Create a new Multi-node kind cluster Kubernetes in Docker supports multi-node clusters. We&amp;rsquo;ll use yaml to create one.
kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane - role: worker - role: worker - role: worker kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane extraPortMappings: - containerPort: 80 hostPort: 80 listenAddress: &amp;#34;0.</description>
    </item>
    
  </channel>
</rss>
